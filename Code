#include<bits/stdc++.h>
using namespace std;

#define sonic ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0)
#define IO(main) if(fopen(main".inp", "r")){freopen(main".inp", "r", stdin);freopen(main".out", "w", stdout);}
#define ll long long
#define ull unsigned long long
#define pii pair<int, int>
#define pll pair<long long, long long>
#define fi first
#define se second
#define pb push_back
#define eb emplace_back
#define el cout << "\n"
#define SZ(x) (x).size()
#define ALL(x) (x).begin(), (x).end()
#define BIT(x, i) (((x) >> (i)) & (1LL))
#define MASK(x) ((1LL) << (x))
#define FOR(i, a, b) for(int (i) = (a), _b = (b); (i) <= _b; (i)++)
#define FORD(i, a, b) for(int (i) = (a), _b = (b); (i) >= _b; (i)--)

const int N = 1e3 + 5;
const int mod = 1e9 + 7;
const ll INF = 1e9 + 1;

template<class X, class Y> bool maximize(X &x, Y y){if(x < y){x = y; return true;} return false;}
template<class X, class Y> bool minimize(X &x, Y y){if(x > y){x = y; return true;} return false;}
void add(int &x, int y){x += y; if(x >= mod) x -= mod;}
void sub(int &x, int y){x -= y; if(x < 0) x += mod;}
int mul(int x, int y) {return 1LL * x * y % mod;}
int calPw(int x, int y){
    int ans = 1;
    while(y){
        if(y & 1) ans = 1LL * ans * x % mod;
        x = 1LL * x * x % mod;
        y >>= 1;
    }
    return ans;
}
///Deruck Phung - Luong The Vinh High School For The Gifted
int n, m, q, a[N];
bool used[N];
vector<int> adj[N];
vector<ll> dp[N][3], Ans;
///Code
vector<ll> Combine(vector<ll> A, vector<ll> B){
    if(A.size() == 0 && B.size() == 0) return A;
    vector<ll> C (A.size() + B.size() - 1, INF);
    FOR(i, 0, (int) A.size() - 1) FOR(j, 0, (int) B.size() - 1)
        minimize(C[i + j], A[i] + B[j]);
    return C;
}

vector<ll> Get(vector<ll> A, vector<ll> B){
    vector<ll> C = A;
    FOR(i, 0, (int) A.size() - 1){
        ll val = INF;
        if(i < (ll) B.size()) minimize(val, B[i]);
        minimize(C[i], val);
    }
    FOR(i, (int) A.size(), (int) B.size() - 1)
        C.push_back(B[i]);
    return C;
}

void dfs(int u, int p){
    used[u] = true;
    for(int v : adj[u]) if(v != p)
        dfs(v, u);

    ///dp(u, 0) : k lấy u
    ///dp(u, 1) : có lấy u, nhưng chưa ghép u
    ///dp(u, 2) : đã ghép u

    dp[u][0].push_back(0);
    dp[u][1].push_back(INF);
    dp[u][1].push_back(a[u]);

    for(int v : adj[u]) if(v != p){

        dp[u][0] = Get(dp[u][0], Combine(dp[u][0], Get(dp[v][0], dp[v][2])));
        dp[u][2] = Get(dp[u][2],
                       Get(Combine(dp[u][2], Get(Get(dp[v][0], dp[v][1]), dp[v][2])),
                       Combine(dp[u][1], Get(dp[v][1], dp[v][2]))));
        dp[u][1] = Get(dp[u][1], Combine(dp[u][1], dp[v][0]));
    }


}

void Solve(){
    FOR(i, 1, n) if(!used[i]){
        dfs(i, i);

        Ans = Combine(Ans, Get(dp[i][0], dp[i][2]));
        Ans = Get(Ans, dp[i][0]);
        Ans = Get(Ans, dp[i][2]);
    }
    FORD(i, (int) Ans.size() - 2, 0){
        if(Ans[i + 1] == INF) continue;
        if(Ans[i] > Ans[i + 1])
            Ans[i] = Ans[i + 1];
    }
    Ans[1] = INF;
    Ans[0] = Ans[1] = INF;
    sort(ALL(Ans));
    while(Ans.back() == INF) Ans.pop_back();


    cin >> q;
    while(q--){
        ll x;
        cin >> x;
        int iter = upper_bound(ALL(Ans), x) - Ans.begin();
        iter--;
        if(iter == -1) cout << 0 << "\n";
        else cout << iter + 2 << "\n";
    }
}

void Read(){
    cin >> n >> m;
    FOR(i, 1, n) cin >> a[i];
    FOR(i, 1, m){
        int u, v;
        cin >> u >> v;
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
}

int main(){
    sonic;
    IO("main");
    int TEST = 1;

    while(TEST--){
        Read();
        Solve();
    }
}
